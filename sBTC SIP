# sBTC SIP

## SIP Number: 022
**Title:** A Decentralized Two-Way Bitcoin Peg  
**Type:** Standard  
**Status:** Draft  

## Abstract
sBTC is a novel digital asset that lets you move Bitcoin in and out of the Stacks blockchain. With sBTC, users can interact with Clarity smart contracts, which enable Bitcoin applications such as payments, decentralized lending, decentralized exchanges, and BTC-backed stablecoins.

sBTC is a SIP-010 token on the Stacks blockchain, backed 1:1 against BTC, and operated by a decentralized set of signers. When BTC is locked on the Bitcoin L1, an equivalent amount of sBTC is issued on the Stacks layer, ensuring a consistent 1:1 ratio of sBTC:BTC. Users can redeem their sBTC at any time by submitting a withdrawal request. Once the request is processed by sBTC signers, BTC is returned to the user’s specified address on the Bitcoin L1.

sBTC will have a crucial role in scaling Bitcoin, as well as introducing new and innovative functionalities to users, growing the size of the overall Bitcoin ecosystem. This SIP aims to describe the sBTC system, the process for signer selection, and the features available in the initial release compared to subsequent versions of sBTC. It does not attempt to describe the low-level technical details of any subsequent release, which will be provided in a future SIP.

## Introduction

## Glossary

| Term                     | Definition |
|--------------------------|------------|
| SIP-10 Token             | A token on the Stacks blockchain that adheres to the fungible token standards outlined in SIP-10. |
| sBTC                     | A SIP-10 token on the Stacks Blockchain that can be turned back into BTC on the Bitcoin Blockchain. 1 sBTC is equivalent to 1 BTC on the Bitcoin Blockchain. |
| sBTC operation           | An operation that initiates some action from the sBTC protocol. |
| Bitcoin holder           | A person or system holding BTC, interested in acquiring sBTC. |
| sBTC holder              | A person or system holding sBTC, interested in turning it back into BTC. |
| .sbtc contract           | A smart contract (or a collection of contracts) defining the sBTC token and functions related to it. |
| sBTC UTxO                | The single UTxO holding the entire BTC balance that’s pegged into sBTC. This UTxO is managed and maintained by the sBTC Signers. |
| Stacks Signer            | The standard Stacks Signer introduced in Nakamoto. |
| sBTC Bootstrap Signer    | A completely separate signer from the Stacks signer that will sign sBTC operations and communicate with contracts on the chain to make that feasible. This entity is registered as an sBTC signer and has partial access to spending the sBTC UTxO. This only exists in sBTC-v1. In subsequent sBTC releases this functionality will be native in the Stacks Signer. |
| sBTC Signer              | sBTC Signer is a more general term for the entity that signs sBTC transactions under any version of sBTC. Under sBTC-v1 the sBTC signer is the sBTC Bootstrap Signer which is wholly separate from the Stacks Signer, but in subsequent releases of sBTC the Stacks Signer will also be responsible for signing sBTC operations, so it would be the sBTC Signer. |
| sBTC Bootstrap Signer Set| The set of all sBTC signers. Each is registered with the .sbtc contract and the transfer. These entities as a group have full democratic access to the sBTC UTxO. |
| sBTC Signer API          | API exposed by the sBTC Signer binary that handles basic low level commands. Remains private except to the Deposit API. |
| Deposit API              | A third party API that communicates with the sBTC Bootstrap Signers via the sBTC Signer API. |

## Problem Statement
Bitcoin is limited in its programmability and scalability. While its security and censorship-resistance make it an ideal platform to build decentralized applications, it is not able to scale to meet the modern needs of users and developers. These challenges have been largely driven by the ethos of the Bitcoin ecosystem to prioritize simplicity and decentralization at the base layer.

**Limitations with Bitcoin’s Scripting Language:** Bitcoin’s script has limited programmability, making it unsuitable for most decentralized applications. This leaves users with very few options to use financial applications, like lending and trading, without entrusting their Bitcoin to centralized entities. This also exposes users to counterparty risk, which has the potential to result in lost funds. This centralization contradicts the fundamental principles of Bitcoin and dampens the potential to unlock new functionality and scalability for users. These limitations in Bitcoin's script have made it challenging for developers to build applications directly on Bitcoin and led developers to seek alternative ecosystems that provide them with greater flexibility and tooling.

**Limitations with Bitcoin’s Scalability:** Bitcoin is limited in its ability to process large amounts of data quickly and efficiently. Today, Bitcoin creates new blocks every 10 minutes on average, an interval which is longer than current state of the art blockchains like Ethereum (approximately 12 seconds) and Solana (about 400 milliseconds). This prohibits many types of applications that require faster confirmation times and creates challenges to provide good user experience. Additionally, during periods of high network congestion, this causes network transaction fees to increase, making it more expensive to transaction on the Bitcoin Layer 1 network.

sBTC aims to solve these problems by enabling secure movement of BTC in and out of the Stacks network, providing fully decentralized and scalable Bitcoin applications. The goal is to implement a protocol that allows BTC holders to participate in smart contracts without relying on trusted third parties. By addressing these challenges, sBTC seeks to create new opportunities for Bitcoin, enhancing its utility and accessibility while preserving the core principles of decentralization and self-sovereignty.

## Proposed Solution
The sBTC protocol enables a secure transfer of Bitcoin to and from the Stacks blockchain, providing users with a digital asset backed 1:1 with BTC that can utilize the scalability and programmability of Stacks. Users can deposit BTC into the protocol and seamlessly transact using smart contracts on the Stacks blockchain, and have the freedom to redeem sBTC tokens for the underlying BTC at any time.

The Stacks blockchain allows for onchain verification of the BTC held in the protocol, enhancing transparency compared to custodial approaches like WBTC. Additionally, the management of the Bitcoin script/wallet on the Bitcoin blockchain is decentralized, involving multiple participants rather than a single entity. This ensures a more resilient and trustworthy system, where signers are economically incentivized to execute peg-out transactions efficiently.

Overall, the sBTC protocol not only addresses the limitations of the Bitcoin scripting system but also provides a secure and decentralized solution for utilizing Bitcoin in various applications.

## Design
To achieve these goals, this proposal implements the following features for sBTC:
- sBTC is a SIP-10 token backed 1-1 by BTC.
- The sBTC peg wallet is maintained by the set of sBTC signers. These signers are responsible for the security and maintenance of the wallet, ensuring that sBTC is redeemable for BTC.
- Bitcoin can be converted into sBTC within 3 Bitcoin blocks. sBTC can be converted into Bitcoin within 6 Bitcoin blocks. This ensures sBTC on and off ramps are faster than other BTC assets on the market.
- SIP-10 token contact remains consistent across sBTC releases. This provides reliability for users and developers, meaning no adjustment from builders will be needed as the system evolves through subsequent releases.

### Iterating Toward an Open Signer Network
This SIP describes an iterative approach to sBTC development via a release plan that is simpler to implement and helps accelerate the sBTC release timeline, but does not include the complete feature set described in the original sBTC design documents.

Thus, the rollout for sBTC will include two key phases:

**Bootstrap:** In this phase an initial group of Signers selected through an open community governance process will be responsible for Signing sBTC transactions on the network. The initial group of Signers will be unchanged throughout the Bootstrap phase of the release schedule. During this phase, sBTC will have a distinct signer set (known as the “sBTC Bootstrap Signer”). And sBTC will not explicitly be integrated into the Stacks Proof of Transfer consensus. As a result, this release can activate without a hard fork.

**Signer Rotation:** In this phase the full design of the sBTC system with an open and decentralized Signer set is reached, increasing decentralization after the system is further tested in the bootstrap phase. At this point, sBTC is integrated into the Proof of Transfer consensus and Signers receive rewards for fulfilling sBTC operations. This release does require a hard fork.

#### Differences in the sBTC Bootstrap Phase:
- sBTC Signers will be selected through an open community governance process. The eligibility criteria to become an sBTC signer is described below and will take into account Signer performance and availability. A subsequent release will implement an open and dynamically rotating signer set for each Proof of Transfer cycle, as described in the original sBTC design documents.
- sBTC Bootstrap Signers are separate from Stacks Signers. In a subsequent sBTC release, and accompanying Stacks network hard fork, Stacks signers will be required to become sBTC signers. The bootstrapping period uses a separate subset of Stacks signers to secure the sBTC protocol and Signer operations are not explicitly linked with slashing of rewards.
- sBTC deposits will be triggered via an API call. During the bootstrap phase sBTC deposits must be initiated via an API call to alert the signers to the presence of a deposit. After the bootstrapping phase users will have the option to alert the Signers of a deposit via a Stacks contract call, but the API will remain as a fee-less option to communicate with the Signers.

These changes enable sBTC to be launched earlier and with less risk than the long term decentralized approach. The sBTC release with an open and dynamic signer set is expected to be released early 2025, which would enshrine the sBTC protocol into Stacks consensus.

## Specification

### Deposits (Minting sBTC)
An API call referencing a Bitcoin transaction initiates the deposit process that can be completed within a single Bitcoin block. The API is separate from the sBTC Bootstrap Signers but will need access to the sBTC Bootstrap Signers to let them know which transactions to pick up.

**API:** The API relays deposit information to the sBTC Bootstrap Signers. The API reduces the cost for deposit on rejection, reduces the scope of sBTC, and makes the sBTC system easier to service.

**Bitcoin Deposit Information:** The deposit will need to pay to taproot and be spendable by a consensus threshold of the signers. The API will need to know all of the taproot spend paths and the spend paths will need to fit a specific format that cannot be clawed back in the short term in order for the Signers to consider approving it.

#### Deposit Flow
The main steps of the sBTC Deposit flow are as follows:
1. **Deposit request:** A bitcoin holder creates a transaction on Bitcoin.
    - The deposit transaction contains a UTXO (deposit UTXO) spendable by sBTC Signers, with an OP_DROP payload.
    - The payload contains the recipient address of the sBTC among other relevant info for the deposit.
    - The relevant info could contain fee suggestion or max_fee.
2. **Proof of deposit:** The bitcoin holder submits a proof of deposit on Stacks by invoking the Signer API.
3. **Deposit accept:**
4. **Deposit redeem:** The sBTC Signers redeem the deposit by consuming the deposit UTXO, consolidating it into the sBTC UTXO.
5. **Mint:** The sBTC Signers finalize the deposit acceptance by calling the mint function in .sbtc to mint the sBTC.

### Withdrawals (Redeeming sBTC)
A clarity call initiates the withdrawal process that successfully completed after 6 sortitions paying to the specified Bitcoin address. Failure cases can be resolved earlier than 6 sortitions, but some will only fail after the sBTC Bootstrap Signer attempts to create the withdrawal transaction.

**Six Sortitions for Withdrawal:** The sBTC Bootstrap signers will only trigger the withdrawal on Bitcoin after the Stacks withdrawal has been confirmed by 6 sortitions. Bitcoin transactions cannot be constructed such that they’re valid for only a specific Bitcoin fork, nor can they be forcefully taken back after they’re created, and a Bitcoin fork can cause a Stacks reorg such that the initial withdrawal request becomes invalid. The sBTC Bootstrap Signers will need to wait for the withdrawals to be sufficiently final in order to make the withdrawal on Bitcoin without risk of allowing a double withdrawal from the Stacks Blockchain. The withdrawal procedure will need to track the number of valid sortitions after the withdrawal to verify that the Stacks transaction is final, and 6 is the standard choice for Bitcoin finality.

#### Withdrawal Flow
The main steps of the sBTC withdrawal flow are as follows:
1. **Withdrawal request:** An sBTC holder calls the withdraw-request function in the .sbtc contract.
    - This transfers the requested amount of sBTC to the .sbtc contract & mints the user a non-transferable locked-sBTC as a placeholder.
2. **Withdrawal accept:** If accepted, the following happens:
    - The signers create a "Withdrawal accept" transaction on Bitcoin which returns the requested amount to the designated address.
    - Once the Bitcoin transaction is confirmed, the signers must then call into the sBTC protocol to mark it as complete - this is done through a Stacks transaction.
    - If successful, the resulting Stacks transaction will record the withdrawal request as complete & will accordingly burn the user’s locked-sBTC.
3. **Withdrawal reject:** If instead the request is rejected, the sBTC signers will call the withdraw-reject function in the .sbtc smart contract. This function does the following:
    - Returns the sBTC to the holder.
    - Records the signer votes.

## Auxiliary Features
Auxiliary features of the sBTC Bootstrap protocol are described below.

- **Stacks Transaction Fee Sponsorship:** sBTC will include the option to have sBTC transactions on Stacks be sponsored in return for some sBTC. Using the approach suggested in this issue, sBTC users will be able to nearly spend sBTC as gas by getting support from an existing STX holder.
- **Signer Wallet Rotation:** Mechanisms are provided for the scenario where a signer wants to rotate their key. For this to happen, signers must coordinate offline and vote on-chain on the new signer set (aka set of keys). Once the new signer set is determined, the signers conduct a wallet handoff and re-execute DKG.

### sBTC Bootstrap Signer Eligibility
The Stacks 2.5 epoch activated the Stacks Signer network, whereby Stackers (users who lock STX in consensus in order to earn BTC rewards) are able to participate in Stacks consensus. Stackers vote to append blocks to the Stacks blockchain by producing a signature over the block. Each Stacker's share of the signature (its weight) is proportional to the fraction of locked STX it owns. This essential function ensures the security and liveness of the Stacks network.

The sBTC Bootstrap Signers will be a separate subset of Stacks Signers. For the sBTC Bootstrap release, Signers will run a binary in addition to the core Stacks software. In a subsequent release and hard fork, sBTC will be enshrined in Stacks consensus and Signers will only need to maintain a single binary.

The following eligibility criteria has been used to identify the sBTC Bootstrap Signers:
- **Stacks 2.5 Participation:** Active participation running a signer on Stacks 2.5 testnet or mainnet for at least two previous cycles.
- **Technical Performance and Uptime:** Consistency in operational status and network stability. Signers should demonstrate a target uptime of at least 99%.
- **Communication & Availability:** Running an sBTC Signer is a pivotal role in the Stacks ecosystem, which requires a high degree of availability and communication with Stacks core developers. Signers must be able to respond to updates within 24 hours.
- **Ecosystem Alignment:** Commitment to the growth and principles of the Stacks and Bitcoin ecosystems with contributions to advance the network.

By implementing a whitelisted signer set for the sBTC Bootstrap release, this helps to reduce time to market to launch sBTC sooner, remove complexity from the initial protocol design, and ensure the sBTC protocol is secure at launch.

### Activation
sBTC Bootstrap is designed to activate on Stacks Nakamoto as defined in SIP-021. Therefore, this SIP is only meaningful when SIP-021 activates. The sBTC Working Group plans to observe at least 2-4 weeks of network behavior on Stacks Nakamoto to ensure a stable release. After this period, sBTC Bootstrap can be activated on the Stacks network without requiring a separate hard fork.

#### Process of Activation
There are different rules for activating this SIP based on whether or not the user has stacked their STX, and how they have done so.

**For Stackers:**
In order for this SIP to activate, the following criteria must be met by the set of Stacked STX:
- At least double the amount of Stacked STX locked by the largest Stacker in the cycle preceding the vote must vote at all to activate this SIP.
- Of the Stacked STX that vote, at least 70% of them must vote "yes."

The act of not voting is the act of siding with the outcome, whatever it may be. We believe that these thresholds are sufficient to demonstrate interest from Stackers -- Stacks users who have a long-term interest in the Stacks blockchain's successful operation -- in performing this upgrade.

**For Non-Stackers:**
Users with liquid STX can vote on proposals using the Ecosystem DAO. Liquid STX is the users balance, less any STX they have locked in PoX stacking protocol, at the block height at which the voting started (preventing the same STX from being transferred between accounts and used to effectively double vote). This is referred to generally as "snapshot" voting.

For sBTC Bootstrap to pass, 70% of all liquid STX committed by voting must be in favor of the proposal.
